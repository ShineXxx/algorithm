/**
 * @author zhj
 * 25. ÂêàÂπ∂‰∏§‰∏™ÊéíÂ∫èÁöÑÈìæË°®
 */
public class MergeTwoLists {
    //ËæìÂÖ•‰∏§‰∏™ÈÄíÂ¢ûÊéíÂ∫èÁöÑÈìæË°®ÔºåÂêàÂπ∂Ëøô‰∏§‰∏™ÈìæË°®Âπ∂‰ΩøÊñ∞ÈìæË°®‰∏≠ÁöÑËäÇÁÇπ‰ªçÁÑ∂ÊòØÈÄíÂ¢ûÊéíÂ∫èÁöÑ„ÄÇ
//
// Á§∫‰æã1Ôºö
//
// ËæìÂÖ•Ôºö1->2->4, 1->3->4
//ËæìÂá∫Ôºö1->1->2->3->4->4
//
// ÈôêÂà∂Ôºö
//
// 0 <= ÈìæË°®ÈïøÂ∫¶ <= 1000
//
// Ê≥®ÊÑèÔºöÊú¨È¢ò‰∏é‰∏ªÁ´ô 21 È¢òÁõ∏ÂêåÔºöhttps://leetcode-cn.com/problems/merge-two-sorted-lists/
// Related Topics ÂàÜÊ≤ªÁÆóÊ≥ï
// üëç 68 üëé 0


//leetcode submit region begin(Prohibit modification and deletion)

    public class ListNode { int val;
    ListNode next;
    ListNode(int x) { val = x; }
    }
    class Solution {
        public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
            //ÂèåÊåáÈíà
            ListNode cur = new ListNode(0);
            ListNode res = cur;
            while (l1 != null && l2 != null) {
                if (l1.val > l2.val) {
                    cur.next = l2;
                    l2 = l2.next;
                } else {
                    cur.next = l1;
                    l1 = l1.next;
                }
                cur = cur.next;
            }
            if (l2 != null) {
                cur.next = l2;
            }
            if (l1 != null) {
                cur.next = l1;
            }
            return res.next;
        }
    }
//leetcode submit region end(Prohibit modification and deletion)

}
